AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Cognito UserPool + AppClient + IdentityPool with Roles
Parameters:
  Stage:
    Type: String
    Default: dev
    Description: Deployment stage.
  GoogleClientId:
    Type: String
    Description: Google OAuth Client ID.
  GoogleClientSecret:
    Type: String
    NoEcho: true
    Description: Google OAuth Client Secret.
  GitHubRepo:
    Type: String
    Description: GitHub repository
  GitHubBranch:
    Type: String
    Default: main
    Description: Branch to connect
  GitHubToken:
    Type: String
    NoEcho: true
    Description: Personal Access Token for GitHub
  UserPoolId:
    Type: String
    Description: Cognito User Pool ID
  UserPoolClientId:
    Type: String
    Description: Cognito User Pool Client ID
  FrontendUrl:
    Type: String
    Default: http://localhost:4000
    Description: Frontend URL for redirects.
Globals:
  Api:
    Cors:
      AllowMethods: '''POST,OPTIONS'''
      AllowHeaders: '''Content-Type,Authorization'''
      AllowOrigin: '''*'''
Resources:
  MyUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName:
        Fn::Sub: ${AWS::StackName}-user-pool
      AutoVerifiedAttributes:
      - email
      MfaConfiguration: 'OFF'
      Schema:
      - Name: email
        Required: true
        Mutable: true
      - Name: name
        Required: true
        Mutable: true
  MyUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    DependsOn: GoogleIdentityProvider
    Properties:
      ClientName:
        Fn::Sub: ${AWS::StackName}-client
      UserPoolId:
        Ref: MyUserPool
      GenerateSecret: false
      ExplicitAuthFlows:
      - ALLOW_USER_PASSWORD_AUTH
      - ALLOW_REFRESH_TOKEN_AUTH
      - ALLOW_USER_SRP_AUTH
      - ALLOW_CUSTOM_AUTH
      SupportedIdentityProviders:
      - COGNITO
      - Google
      AllowedOAuthFlows:
      - code
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthScopes:
      - openid
      - email
      - profile
      CallbackURLs:
      - Ref: FrontendUrl
      LogoutURLs:
      - Ref: FrontendUrl
  GoogleIdentityProvider:
    Type: AWS::Cognito::UserPoolIdentityProvider
    Properties:
      ProviderName: Google
      ProviderType: Google
      UserPoolId:
        Ref: MyUserPool
      ProviderDetails:
        client_id:
          Ref: GoogleClientId
        client_secret:
          Ref: GoogleClientSecret
        authorize_scopes: openid email profile
      AttributeMapping:
        email: email
        name: name
  MyIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName:
        Fn::Sub: ${AWS::StackName}-identity-pool
      AllowUnauthenticatedIdentities: true
      CognitoIdentityProviders:
      - ClientId:
          Ref: MyUserPoolClient
        ProviderName:
          Fn::Sub: cognito-idp.${AWS::Region}.amazonaws.com/${MyUserPool}
  MyUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain:
        Fn::Sub: ${AWS::StackName}-${Stage}
      UserPoolId:
        Ref: MyUserPool
  AuthenticatedRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-authenticated-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Federated: cognito-identity.amazonaws.com
          Action: sts:AssumeRoleWithWebIdentity
          Condition:
            StringEquals:
              cognito-identity.amazonaws.com:aud:
                Ref: MyIdentityPool
            ForAnyValue:StringLike:
              cognito-identity.amazonaws.com:amr: authenticated
      Policies:
      - PolicyName: authenticated-policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - mobileanalytics:PutEvents
            - cognito-sync:*
            - cognito-identity:*
            Resource: '*'
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
  UnauthenticatedRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-unauthenticated-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Federated: cognito-identity.amazonaws.com
          Action: sts:AssumeRoleWithWebIdentity
          Condition:
            StringEquals:
              cognito-identity.amazonaws.com:aud:
                Ref: MyIdentityPool
            ForAnyValue:StringLike:
              cognito-identity.amazonaws.com:amr: unauthenticated
      Policies:
      - PolicyName: unauthenticated-policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - cognito-sync:*
            - cognito-identity:*
            Resource: '*'
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
  IdentityPoolRoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId:
        Ref: MyIdentityPool
      Roles:
        authenticated:
          Fn::GetAtt:
          - AuthenticatedRole
          - Arn
        unauthenticated:
          Fn::GetAtt:
          - UnauthenticatedRole
          - Arn
  AmplifyApp:
    Type: AWS::Amplify::App
    Properties:
      Name:
        Fn::Sub: ${AWS::StackName}-amplify-app
      Repository:
        Fn::Sub: https://github.com/${GitHubRepo}
      OauthToken:
        Ref: GitHubToken
      EnvironmentVariables:
      - Name: USER_POOL_ID
        Value:
          Ref: UserPoolId
      - Name: USER_POOL_CLIENT_ID
        Value:
          Ref: UserPoolClientId
      BuildSpec: "version: 1\napplications:\n  - backend:\n      phases:\n       \
        \ build:\n          commands:\n            - npm install\n            - sam\
        \ build\n            - sam deploy --no-confirm-changeset --no-fail-on-empty-changeset\
        \ --stack-name $STACK_NAME --capabilities CAPABILITY_IAM\n      artifacts:\n\
        \        baseDirectory: .\n        files:\n          - template.yaml\n   \
        \   cache:\n        paths:\n          - node_modules/**/*\n"
  AmplifyBranch:
    Type: AWS::Amplify::Branch
    Properties:
      AppId:
        Fn::GetAtt:
        - AmplifyApp
        - AppId
      BranchName:
        Ref: GitHubBranch
      EnableAutoBuild: true
      EnvironmentVariables:
      - Name: USER_POOL_ID
        Value:
          Ref: UserPoolId
      - Name: USER_POOL_CLIENT_ID
        Value:
          Ref: UserPoolClientId
  CognitoDependenciesLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: cognito-deps
      Description: Dependencies for Cognito backend
      ContentUri: ..\..\layers
      CompatibleRuntimes:
      - nodejs22.x
  SignUpFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambda.signupHandler
      Runtime: nodejs22.x
      MemorySize: 512
      Timeout: 15
      CodeUri: SignUpFunction
      Layers:
      - Ref: CognitoDependenciesLayer
      Environment:
        Variables:
          USER_POOL_ID:
            Ref: MyUserPool
          USER_POOL_CLIENT_ID:
            Ref: MyUserPoolClient
      Policies:
      - AWSLambdaBasicExecutionRole
      - Statement:
          Effect: Allow
          Action:
          - cognito-idp:SignUp
          Resource:
            Fn::Sub: arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${MyUserPool}
      Events:
        SignupApi:
          Type: Api
          Properties:
            Path: /auth/signup
            Method: post
    Metadata:
      SamResourceId: SignUpFunction
  ConfirmFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambda.confirmHandler
      Runtime: nodejs22.x
      MemorySize: 512
      Timeout: 15
      CodeUri: ConfirmFunction
      Layers:
      - Ref: CognitoDependenciesLayer
      Environment:
        Variables:
          USER_POOL_ID:
            Ref: MyUserPool
          USER_POOL_CLIENT_ID:
            Ref: MyUserPoolClient
      Policies:
      - AWSLambdaBasicExecutionRole
      - Statement:
          Effect: Allow
          Action:
          - cognito-idp:ConfirmSignUp
          Resource:
            Fn::Sub: arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${MyUserPool}
      Events:
        ConfirmApi:
          Type: Api
          Properties:
            Path: /auth/confirm
            Method: post
    Metadata:
      SamResourceId: ConfirmFunction
  SigninFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambda.signinHandler
      Runtime: nodejs22.x
      MemorySize: 512
      Timeout: 15
      CodeUri: SigninFunction
      Layers:
      - Ref: CognitoDependenciesLayer
      Environment:
        Variables:
          USER_POOL_ID:
            Ref: MyUserPool
          USER_POOL_CLIENT_ID:
            Ref: MyUserPoolClient
      Policies:
      - AWSLambdaBasicExecutionRole
      - Statement:
          Effect: Allow
          Action:
          - cognito-idp:AdminInitiateAuth
          Resource:
            Fn::Sub: arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${MyUserPool}
      Events:
        SigninApi:
          Type: Api
          Properties:
            Path: /auth/signin
            Method: post
    Metadata:
      SamResourceId: SigninFunction
  ForgotPasswordFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambda.forgotPasswordHandler
      Runtime: nodejs22.x
      MemorySize: 512
      Timeout: 15
      CodeUri: ForgotPasswordFunction
      Layers:
      - Ref: CognitoDependenciesLayer
      Environment:
        Variables:
          USER_POOL_ID:
            Ref: MyUserPool
          USER_POOL_CLIENT_ID:
            Ref: MyUserPoolClient
      Policies:
      - AWSLambdaBasicExecutionRole
      - Statement:
          Effect: Allow
          Action:
          - cognito-idp:ForgotPassword
          Resource:
            Fn::Sub: arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${MyUserPool}
      Events:
        ForgotPasswordApi:
          Type: Api
          Properties:
            Path: /auth/forgot-password
            Method: post
    Metadata:
      SamResourceId: ForgotPasswordFunction
  ConfirmNewPasswordFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambda.confirmNewPasswordHandler
      Runtime: nodejs22.x
      MemorySize: 512
      Timeout: 15
      CodeUri: ConfirmNewPasswordFunction
      Layers:
      - Ref: CognitoDependenciesLayer
      Environment:
        Variables:
          USER_POOL_ID:
            Ref: MyUserPool
          USER_POOL_CLIENT_ID:
            Ref: MyUserPoolClient
      Policies:
      - AWSLambdaBasicExecutionRole
      - Statement:
          Effect: Allow
          Action:
          - cognito-idp:ConfirmForgotPassword
          Resource:
            Fn::Sub: arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${MyUserPool}
      Events:
        ConfirmNewPasswordApi:
          Type: Api
          Properties:
            Path: /auth/confirm-password
            Method: post
    Metadata:
      SamResourceId: ConfirmNewPasswordFunction
  SignOutFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambda.signoutHandler
      Runtime: nodejs22.x
      MemorySize: 512
      Timeout: 15
      CodeUri: SignOutFunction
      Layers:
      - Ref: CognitoDependenciesLayer
      Environment:
        Variables:
          USER_POOL_ID:
            Ref: MyUserPool
          USER_POOL_CLIENT_ID:
            Ref: MyUserPoolClient
      Policies:
      - AWSLambdaBasicExecutionRole
      - Statement:
          Effect: Allow
          Action:
          - cognito-idp:GlobalSignOut
          Resource:
            Fn::Sub: arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${MyUserPool}
      Events:
        SignOutApi:
          Type: Api
          Properties:
            Path: /auth/signout
            Method: post
    Metadata:
      SamResourceId: SignOutFunction
Outputs:
  UserPoolId:
    Description: UserPool Id.
    Value:
      Ref: MyUserPool
  UserPoolClientId:
    Description: App client id.
    Value:
      Ref: MyUserPoolClient
  IdentityPoolId:
    Description: Identity Pool ID.
    Value:
      Ref: MyIdentityPool
  AuthenticatedRoleArn:
    Description: Authenticated Role ARN.
    Value:
      Fn::GetAtt:
      - AuthenticatedRole
      - Arn
  UnauthenticatedRoleArn:
    Description: Unauthenticated Role ARN.
    Value:
      Fn::GetAtt:
      - UnauthenticatedRole
      - Arn
  AmplifyAppId:
    Description: Amplify App ID
    Value:
      Fn::GetAtt:
      - AmplifyApp
      - AppId
  AmplifyAppDefaultDomain:
    Description: Amplify App Default Domain
    Value:
      Fn::GetAtt:
      - AmplifyApp
      - DefaultDomain
  AmplifyBranchUrl:
    Description: Deployed Branch URL
    Value:
      Fn::Sub: https://${AmplifyBranch.BranchName}.${AmplifyApp.DefaultDomain}
  ApiUrl:
    Description: API Gateway endpoint
    Value:
      Fn::Sub: https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/
