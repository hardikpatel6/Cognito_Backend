AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Cognito UserPool + AppClient + IdentityPool with Roles
 
Parameters:
  Stage:
    Type: String
    Default: dev
    Description: Deployment stage.
  GoogleClientId:
    Type: String
    Description: Google OAuth Client ID.
  GoogleClientSecret:
    Type: String
    NoEcho: true
    Description: Google OAuth Client Secret.
  GitHubRepo:
    Type: String
    Description: GitHub repository # (format: username/reponame)
  GitHubBranch:
    Type: String
    Default: main
    Description: Branch to connect # (default: main)
  GitHubToken:
    Type: String
    NoEcho: true
    Description: Personal Access Token for GitHub # (with repo permissions)
  UserPoolId:
    Type: String
    Description: Cognito User Pool ID
  UserPoolClientId:
    Type: String
    Description: Cognito User Pool Client ID
  FrontendUrl:
    Type: String
    Default: 'http://localhost:4000'
    Description: Frontend URL for redirects.

Globals:
  Api:
    Cors:
      AllowMethods: "'POST,OPTIONS'"
      AllowHeaders: "'Content-Type,Authorization'"
      AllowOrigin: "'http://localhost:4000'" 
Resources:
  MyUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub "${AWS::StackName}-user-pool"
      AutoVerifiedAttributes:
        - email
      MfaConfiguration: "OFF"
      Schema:
        - Name: email
          Required: true
          Mutable: true
        - Name: name
          Required: true
          Mutable: true

  MyUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    DependsOn: GoogleIdentityProvider
    Properties:
      ClientName: !Sub "${AWS::StackName}-client"
      UserPoolId: !Ref MyUserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_SRP_AUTH
        - ALLOW_CUSTOM_AUTH
      SupportedIdentityProviders:
        - COGNITO
        - Google
      AllowedOAuthFlows:
        - code
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthScopes:
        - openid
        - email
        - profile
      CallbackURLs:
        - !Ref FrontendUrl
      LogoutURLs:
        - !Ref FrontendUrl

  GoogleIdentityProvider:
    Type: AWS::Cognito::UserPoolIdentityProvider
    Properties:
      ProviderName: Google
      ProviderType: Google
      UserPoolId: !Ref MyUserPool
      ProviderDetails:
        client_id: !Ref GoogleClientId
        client_secret: !Ref GoogleClientSecret
        authorize_scopes: "openid email profile"
      AttributeMapping:
        email: email
        name: name

  MyIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: !Sub "${AWS::StackName}-identity-pool"
      AllowUnauthenticatedIdentities: true
      CognitoIdentityProviders:
        - ClientId: !Ref MyUserPoolClient
          ProviderName: !Sub "cognito-idp.${AWS::Region}.amazonaws.com/${MyUserPool}"

  MyUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Sub "${AWS::StackName}-${Stage}"   # Will generate like my-stack-dev
      UserPoolId: !Ref MyUserPool
      
  AuthenticatedRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-authenticated-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Federated: "cognito-identity.amazonaws.com"
            Action: "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Ref MyIdentityPool
              ForAnyValue:StringLike:
                "cognito-identity.amazonaws.com:amr": authenticated
      Policies:
        - PolicyName: authenticated-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - mobileanalytics:PutEvents
                  - cognito-sync:*
                  - cognito-identity:*
                Resource: "*"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess

  UnauthenticatedRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-unauthenticated-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Federated: "cognito-identity.amazonaws.com"
            Action: "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Ref MyIdentityPool
              ForAnyValue:StringLike:
                "cognito-identity.amazonaws.com:amr": unauthenticated
      Policies:
        - PolicyName: unauthenticated-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - cognito-sync:*
                  - cognito-identity:*
                Resource: "*"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess

  IdentityPoolRoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref MyIdentityPool
      Roles:
        authenticated: !GetAtt AuthenticatedRole.Arn
        unauthenticated: !GetAtt UnauthenticatedRole.Arn
  AmplifyApp:
    Type: AWS::Amplify::App
    Properties:
      Name: !Sub "${AWS::StackName}-amplify-app"
      Repository: !Sub "https://github.com/${GitHubRepo}"
      OauthToken: !Ref GitHubToken
      EnvironmentVariables:
        - Name: USER_POOL_ID
          Value: !Ref UserPoolId
        - Name: USER_POOL_CLIENT_ID
          Value: !Ref UserPoolClientId
      BuildSpec: |
        version: 1
        applications:
          - backend:
              phases:
                build:
                  commands:
                    - npm install
                    - sam build
                    - sam deploy --no-confirm-changeset --no-fail-on-empty-changeset --stack-name $STACK_NAME --capabilities CAPABILITY_IAM
              artifacts:
                baseDirectory: .
                files:
                  - template.yaml
              cache:
                paths:
                  - node_modules/**/*
  AmplifyBranch:
    Type: AWS::Amplify::Branch
    Properties:
      AppId: !GetAtt AmplifyApp.AppId
      BranchName: !Ref GitHubBranch
      EnableAutoBuild: true
      EnvironmentVariables:
        - Name: USER_POOL_ID
          Value: !Ref UserPoolId
        - Name: USER_POOL_CLIENT_ID
          Value: !Ref UserPoolClientId
  
  CognitoDependenciesLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: cognito-deps
      Description: "Dependencies for Cognito backend"
      ContentUri: layers/
      CompatibleRuntimes:
        - nodejs22.x

  SignUpFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler:  lambda.signupHandler
      Runtime: nodejs22.x
      MemorySize: 512
      Timeout: 15
      CodeUri: ./src
      Layers:
        - !Ref CognitoDependenciesLayer
      Environment:
        Variables:
          USER_POOL_ID: !Ref MyUserPool
          USER_POOL_CLIENT_ID: !Ref MyUserPoolClient
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            Effect: Allow
            Action:
              - cognito-idp:SignUp
            Resource: !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${MyUserPool}
      Events:
        SignupApi:
          Type: Api
          Properties:
            Path: /auth/signup
            Method: post

  ConfirmFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler:  lambda.confirmHandler
      Runtime: nodejs22.x
      MemorySize: 512
      Timeout: 15
      CodeUri: ./src
      Layers:
        - !Ref CognitoDependenciesLayer
      Environment:
        Variables:
          USER_POOL_ID: !Ref MyUserPool
          USER_POOL_CLIENT_ID: !Ref MyUserPoolClient
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            Effect: Allow
            Action:
              - cognito-idp:ConfirmSignUp
            Resource: !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${MyUserPool}
      Events:
        ConfirmApi:
          Type: Api
          Properties:
            Path: /auth/confirm
            Method: post

  SigninFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler:  lambda.signinHandler
      Runtime: nodejs22.x
      MemorySize: 512
      Timeout: 15
      CodeUri: ./src
      Layers:
        - !Ref CognitoDependenciesLayer
      Environment:
        Variables:
          USER_POOL_ID: !Ref MyUserPool
          USER_POOL_CLIENT_ID: !Ref MyUserPoolClient
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            Effect: Allow
            Action:
              - cognito-idp:AdminInitiateAuth
            Resource: !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${MyUserPool}
      Events:
        SigninApi:
          Type: Api
          Properties:
            Path: /auth/signin
            Method: post

  ForgotPasswordFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler:  lambda.forgotPasswordHandler
      Runtime: nodejs22.x
      MemorySize: 512
      Timeout: 15
      CodeUri: ./src
      Layers:
        - !Ref CognitoDependenciesLayer
      Environment:
        Variables:
          USER_POOL_ID: !Ref MyUserPool
          USER_POOL_CLIENT_ID: !Ref MyUserPoolClient
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            Effect: Allow
            Action:
              - cognito-idp:ForgotPassword
            Resource: !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${MyUserPool}
      Events:
        ForgotPasswordApi:
          Type: Api
          Properties:
            Path: /auth/forgot-password
            Method: post

  ConfirmNewPasswordFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler:  lambda.confirmNewPasswordHandler
      Runtime: nodejs22.x
      MemorySize: 512
      Timeout: 15
      CodeUri: ./src
      Layers:
        - !Ref CognitoDependenciesLayer
      Environment:
        Variables:
          USER_POOL_ID: !Ref MyUserPool
          USER_POOL_CLIENT_ID: !Ref MyUserPoolClient
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            Effect: Allow
            Action:
              - cognito-idp:ConfirmForgotPassword
            Resource: !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${MyUserPool}
      Events:
        ConfirmNewPasswordApi:
          Type: Api
          Properties:
            Path: /auth/confirm-new-password
            Method: post
  SignOutFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler:  lambda.signoutHandler
      Runtime: nodejs22.x
      MemorySize: 512
      Timeout: 15
      CodeUri: ./src
      Layers:
        - !Ref CognitoDependenciesLayer
      Environment:
        Variables:
          USER_POOL_ID: !Ref MyUserPool
          USER_POOL_CLIENT_ID: !Ref MyUserPoolClient
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            Effect: Allow
            Action:
              - cognito-idp:GlobalSignOut
            Resource: !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${MyUserPool}
      Events:
        SignOutApi:
          Type: Api
          Properties:
            Path: /auth/signout
            Method: post
Outputs:
  UserPoolId:
    Description: UserPool Id.
    Value: !Ref MyUserPool
  UserPoolClientId:
    Description: App client id.
    Value: !Ref MyUserPoolClient
  IdentityPoolId:
    Description: Identity Pool ID.
    Value: !Ref MyIdentityPool
  AuthenticatedRoleArn:
    Description: Authenticated Role ARN.
    Value: !GetAtt AuthenticatedRole.Arn
  UnauthenticatedRoleArn:
    Description: Unauthenticated Role ARN.
    Value: !GetAtt UnauthenticatedRole.Arn
  AmplifyAppId:
    Description: Amplify App ID
    Value: !GetAtt AmplifyApp.AppId
  AmplifyAppDefaultDomain:
    Description: Amplify App Default Domain
    Value: !GetAtt AmplifyApp.DefaultDomain
  AmplifyBranchUrl:
    Description: Deployed Branch URL
    Value: !Sub "https://${AmplifyBranch.BranchName}.${AmplifyApp.DefaultDomain}"
  ApiUrl:
    Description: "API Gateway endpoint"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
